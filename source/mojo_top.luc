module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output outled,
    //output io_led[24],
    input io_button[5],
    output io_seg[8],
    output io_sel[4],
    input leftButton,
    input rightButton,
    input startButton
  ) {
  
    sig rst;                                     // reset signal
   .clk(clk) {

    reset_conditioner reset_cond;
    edge_detector edge_detector (#RISE(1), #FALL(0));
    multi_dec_ctr dec_ctr;

  .rst(rst)
    {
      matrix_output matrix_output(.leftBtn(leftButton), .rightBtn(/*io_button[3]*/rightButton), .startBtn(/*io_button[1]*/startButton));   
      multi_seven_seg seg;
    }    
  }
  
  always {

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    outled = matrix_output.out;
    //io_led = matrix_output.debug;
    led  = matrix_output.score;
    dec_ctr.rst=matrix_output.reset;
    edge_detector.in= matrix_output.score;
    dec_ctr.inc = edge_detector.out;
    seg.values = dec_ctr.digits;
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
      }
  }   
