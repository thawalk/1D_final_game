module sprite (
    
    // module generates the 2 rows of the LED matrix
    
    input clk,  // clock
    input rst,  // reset
    input button_l[1],        // left button from user input
    input button_r[1],       //right button from user input
    output fillup[8][24],    //register to fillup according to position of charactor
    input startBtn[1]        //reset button
  ) {
  // instantiate the alu module
  alu alu;
  
  // ALUFN value for the different functions used
  const XOR = 6b010110;  //for easy access to alu functions we make some alufn constants
  const SHL = 6b100000;
  const SHR = 6b100001;
  
  .clk(clk){
    button_conditioner button_left; //conditioning the button for clean presses
    button_conditioner button_right;
    button_conditioner button_start;
    edge_detector start_edge(#RISE(1),#FALL(0));
    edge_detector left_edge(#RISE(1),#FALL(0));
    edge_detector right_edge(#RISE(1),#FALL(0));
    .rst(rst){
      registerSetup regs;  //instantion of registers
    }
  }
  .clk(clk){
    .rst(rst){
      fsm new_fsm={IDLE, LEFT, RIGHT, INTERIM_STATE};  //state machine for starting position, moving left and right, interim check states
    }
  }
  sig start; //signals to indicate which button is pressed
  sig left; 
  sig right; 
  const STARTING_POS = b00011000; //middle position of the matrix
  sig rowout[8]; //middle-man signal
  var i;
  const B = 24b111111110000000000000000;      //This is actually blue
  const G = 24b000000000000000011111111;      //This is actully green
  
  always {
    button_left.in=button_l;
    button_right.in=button_r;
    left_edge.in=button_left.out;
    right_edge.in=button_right.out;
    left=left_edge.out;
    right=right_edge.out;
    button_start.in=startBtn;
    start_edge.in=button_start.out;
    start = start_edge.out;
    
    alu.a = 0; //instantiate the alu inputs and alufn to 0 at the beginning of each cycle
    alu.b = 0;
    alu.alufn = 0;
    regs.addr=0; //we are writing the position of our character to the 1st register
    regs.en=0; 
    regs.data=8b0;
    
    
    case(new_fsm.q){
      new_fsm.IDLE:
        regs.en=1;     //set write to be 1
        regs.data=STARTING_POS; // writing the intial position to the rows
        new_fsm.d=new_fsm.INTERIM_STATE; //move to interim state
      
      
      
      new_fsm.LEFT:
        // if left if pressed and user is not at the edge
        if (regs.out[7] != 1){
          alu.a = regs.out;      // shift left row 0 by 1, using the data in regs
          alu.b = 1;              //alu function used here
          alu.alufn = SHL; 
          regs.en=1;       //write
          regs.data=alu.alu_out;  //write new data
        }
        
        rowout=regs.out; //get the new data
        new_fsm.d=new_fsm.INTERIM_STATE; //change state to interim state
      
      
      
      
      
      new_fsm.RIGHT:
        // if right is pressed and user is not at the edge
        if (regs.out[0] != 1){
          regs.en=1;
          alu.a = regs.out;      // shift right row by 1
          alu.b = 1;
          alu.alufn = SHR;
          regs.data=alu.alu_out; //write new data
        }
        
        rowout=regs.out;
        new_fsm.d=new_fsm.INTERIM_STATE; //
      
      
      
      new_fsm.INTERIM_STATE: //place where to decide what to do next
        alu.a = left;      // button_l XOR button_r
        alu.b = right;     
        alu.alufn = XOR;  //alu function used here
        
        if(left!=1 && alu.alu_out != 1){   //makes sure that both buttons are not pressed tgt
          rowout=regs.out;
          new_fsm.d=new_fsm.INTERIM_STATE; // if they are pressed tgt send it back to interim state
        }
        
        else if(left==1 && alu.alu_out == 1){
          new_fsm.d=new_fsm.LEFT;        //if left is pressed go to the left state to shift the character position
        }
        
        if(right!=1 && alu.alu_out != 1){   //makes sure that both buttons are not pressed tgt
          rowout=regs.out;
          new_fsm.d=new_fsm.INTERIM_STATE;  // if they are pressed tgt send it back to interim state
        }
        
        if(right==1 && alu.alu_out == 1){
          new_fsm.d=new_fsm.RIGHT;          //if right is pressed go to the right state to shift the character position
        }
        
        if(start){
         new_fsm.d=new_fsm.IDLE;}           //this is to reset the position of the charcter at the beginning of each state 
    }
    
    for(i=0; i<8; i++){   //read from the register and assign it colors
      if(regs.out[i]){
        fillup[i] = G; //if character is there, assign it green
      }
      else{
        fillup[i] = B; //if character is not there, assign it blue (background)
      }
    }
  }
}